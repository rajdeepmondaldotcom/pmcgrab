name: Release and Publish to PyPI

on:
  push:
    branches: [main]
    paths:
      - "pyproject.toml"

jobs:
  tag_release:
    name: Create Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import tomllib, pathlib, json, sys; print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create tag if it does not exist
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          git config user.name github-actions
          git config user.email rajdeep@rajdeepmondal.com
          # Delete existing tag if it exists
          git tag -d "$TAG" 2>/dev/null || true
          git push origin ":refs/tags/$TAG" 2>/dev/null || true
          # Create new tag
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

  build_publish:
    name: Build & Publish
    needs: tag_release
    runs-on: ubuntu-latest
    permissions:
      id-token: write # trusted publishing
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.12

      - name: Install build deps
        run: uv sync --dev

      - name: Build package
        run: uv build

      - name: Publish to PyPI
        run: uv publish --token ${{ secrets.PYPI_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.tag_release.outputs.version }}
          release_name: Release v${{ needs.tag_release.outputs.version }}
          body: |
            ## Changes in v${{ needs.tag_release.outputs.version }}

            - Automated release from version bump
            - Install with: `uv add pmcgrab`
          draft: false
          prerelease: false
