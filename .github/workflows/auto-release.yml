name: Auto Release on Version Bump

on:
  push:
    branches: [main]
    paths:
      - "pyproject.toml"
      - "src/pmcgrab/__init__.py"

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      new-version: ${{ steps.version-check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.12

      - name: Check version change
        id: version-check
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")

          # Get previous version from git
          git checkout HEAD~1 -- pyproject.toml 2>/dev/null || true
          PREV_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || echo "0.0.0")

          # Restore current version
          git checkout HEAD -- pyproject.toml

          echo "Previous version: $PREV_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi

  auto-release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ needs.check-version.outputs.new-version }}" -m "Auto-release v${{ needs.check-version.outputs.new-version }}"
          git push origin "v${{ needs.check-version.outputs.new-version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger release workflow
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              ref: 'main',
              inputs: {
                version: '${{ needs.check-version.outputs.new-version }}'
              }
            });
